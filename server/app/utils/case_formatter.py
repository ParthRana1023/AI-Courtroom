# app/utils/case_formatter.py
import re
from typing import Dict, List, Optional, Any

def extract_case_details(case_text: str) -> Dict[str, Any]:
    """
    Extract structured information from the case text.
    
    Args:
        case_text: The raw case text generated by the LLM
        
    Returns:
        A dictionary containing structured case information
    """
    # Initialize the result dictionary
    result = {
        "title": "",
        "case_number": "",
        "court": "",
        "sections": [],
        "petitioner": {
            "name": "",
            "details": "",
            "address": ""
        },
        "respondents": [],
        "petition_type": "",
        "background": [],
        "grounds": [],
        "evidence": {
            "witnesses": [],
            "physical_digital": []
        },
        "prayers": [],
        "verification": "",
        "date_filed": "",
        "place_filed": "",
        "advocate": ""
    }
    
    # Extract title
    title_match = re.search(r'\*\*IN THE MATTER OF:\*\*\s*\n\*\*(.*?)\*\*(?=\s*\n\*\*BETWEEN|\s*\n\*\*IN THE MATTER)', case_text, re.DOTALL)
    if title_match:
        result["title"] = title_match.group(1).strip()
    # Alternative title pattern without the IN THE MATTER OF header
    elif "**IN THE MATTER OF:**" not in case_text:
        title_match = re.search(r'\*\*(Under Section.*?)\*\*', case_text)
        if title_match:
            result["title"] = title_match.group(1).strip()
    
    # Extract court and case number
    court_match = re.search(r'\*\*IN THE (.*?)\*\*', case_text)
    if court_match:
        result["court"] = court_match.group(1).strip()
    
    case_number_match = re.search(r'CASE NO\.:\s*(.*?)(?:\s|\n)', case_text)
    cnr_match = re.search(r'CNR Number:\s*(.*?)(?:\s|\n)', case_text)
    if case_number_match:
        result["case_number"] = case_number_match.group(1).strip()
    elif cnr_match:
        result["case_number"] = cnr_match.group(1).strip()
    
    # Extract sections involved
    sections_match = re.search(r'Under Section (.*?) of', case_text)
    if sections_match:
        sections_text = sections_match.group(1).strip()
        result["sections"] = [s.strip() for s in sections_text.split(',')]
    
    # Also look for IPC sections
    ipc_sections_match = re.search(r'IPC SECTIONS (\d+(?:,\s*\d+)*)', case_text)
    if ipc_sections_match:
        ipc_sections = [s.strip() for s in ipc_sections_match.group(1).split(',')]
        result["sections"].extend(ipc_sections)
    
    # Look for sections in the matter section
    matter_sections_match = re.search(r'Under Section.*?and Sections (.*?) of', case_text)
    if matter_sections_match:
        matter_sections = [s.strip() for s in matter_sections_match.group(1).split(',')]
        for section in matter_sections:
            if section not in result["sections"]:
                result["sections"].append(section)
    
    # Extract petitioner information
    petitioner_block_match = re.search(r'\*\*BETWEEN:\*\*\s*\n\s*\n\s*\*\*(.*?)\*\*\s*\n(.*?)(?=…|\.\.\.).*?\*\*PETITIONER\*\*', 
                                      case_text, re.DOTALL)
    
    # Try alternative pattern for petitioner
    if not petitioner_block_match:
        petitioner_block_match = re.search(r'\*\*BETWEEN\*\*\s*\n(.*?)\.\.\.Petitioner', case_text, re.DOTALL)
        if petitioner_block_match:
            petitioner_text = petitioner_block_match.group(1).strip()
            name_match = re.search(r'^(.*?),\s*Age', petitioner_text)
            if name_match:
                result["petitioner"]["name"] = name_match.group(1).strip()
            result["petitioner"]["details"] = petitioner_text
            
            # Try to extract address
            address_match = re.search(r'Residing at:\s*(.*?)(?:\n|$)', petitioner_text)
            if address_match:
                result["petitioner"]["address"] = address_match.group(1).strip()
    
    # Extract respondents - improved pattern
    respondent_section = re.search(r'\*\*AND\*\*\s*\n\s*\n(.*?)(?:…|\.\.\.)(?:\s*)\*\*RESPONDENTS\*\*', case_text, re.DOTALL)
    if not respondent_section:
        respondent_section = re.search(r'\*\*AND\*\*\s*\n(.*?)\.\.\.Respondents', case_text, re.DOTALL)
    
    if respondent_section:
        respondent_text = respondent_section.group(1)
        # Try to match numbered respondents with asterisks
        respondent_entries = re.findall(r'\d+\.\s*\*\*(.*?)\*\*,\s*(.*?)(?=\d+\.|\n\n|$)', respondent_text + "\n\n", re.DOTALL)
        
        if respondent_entries:
            for name, details in respondent_entries:
                respondent = {
                    "name": name.strip(),
                    "details": details.strip(),
                    "address": ""
                }
                
                # Try to extract address
                address_match = re.search(r'Residing at:\s*(.*?)(?:\n|$)', details)
                if address_match:
                    respondent["address"] = address_match.group(1).strip()
                
                result["respondents"].append(respondent)
        else:
            # Try another pattern for numbered entries
            respondent_entries = re.findall(r'\d+\.\s*\*\*(.*?)\*\*\s*,\s*Age\s*(.*?)(?=\d+\.|\n\n|$)', respondent_text + "\n\n", re.DOTALL)
            if respondent_entries:
                for name, details in respondent_entries:
                    full_details = f"Age {details.strip()}"
                    respondent = {
                        "name": name.strip(),
                        "details": full_details,
                        "address": ""
                    }
                    
                    # Try to extract address
                    address_match = re.search(r'Residing at:\s*(.*?)(?:\n|$)', details)
                    if address_match:
                        respondent["address"] = address_match.group(1).strip()
                    
                    result["respondents"].append(respondent)
            else:
                # Simplest fallback pattern
                lines = respondent_text.strip().split('\n')
                current_respondent = None
                
                for line in lines:
                    if re.match(r'\d+\.', line):
                        # This is a new respondent entry
                        name_match = re.search(r'\d+\.\s*\*\*(.*?)\*\*', line)
                        if name_match:
                            name = name_match.group(1).strip()
                            current_respondent = {
                                "name": name,
                                "details": line.strip(),
                                "address": ""
                            }
                            result["respondents"].append(current_respondent)
                    elif current_respondent and "Residing at:" in line:
                        # This is an address line
                        address = re.sub(r'Residing at:\s*', '', line).strip()
                        current_respondent["address"] = address
    
    # Extract petition type
    petition_match = re.search(r'\*\*PETITION UNDER (.*?)\*\*', case_text)
    if petition_match:
        result["petition_type"] = petition_match.group(1).strip()
    
    # Extract background/chronology - improved pattern
    background_section = re.search(r'BACKGROUND.*?EVENTS:?\*\*\s*\n\s*\n(.*?)(?=---)', case_text, re.DOTALL)
    if background_section:
        background_text = background_section.group(1)
        # Try to match events with date in bold followed by colon
        events = re.findall(r'-\s*\*\*(.*?)\*\*\s*:(.*?)(?=\n-|\n\n|$)', background_text)
        
        if events:
            for date, event in events:
                result["background"].append({
                    "date": date.strip(),
                    "event": event.strip()
                })
        else:
            # Try alternative pattern without colon
            events = re.findall(r'-\s*\*\*(.*?)\*\*\s*(.*?)(?=\n-|\n\n|$)', background_text)
            if events:
                for date, event in events:
                    result["background"].append({
                        "date": date.strip(),
                        "event": event.strip()
                    })
            else:
                # Simplest fallback pattern
                events = re.findall(r'-\s*(.*?):\s*(.*?)(?=\n-|\n\n|$)', background_text)
                for date, event in events:
                    result["background"].append({
                        "date": date.strip(),
                        "event": event.strip()
                    })
    
    # Extract grounds
    grounds_section = re.search(r'GROUNDS.*?\*\*\s*\n\s*\n(.*?)(?=---)', case_text, re.DOTALL)
    if grounds_section:
        grounds_text = grounds_section.group(1)
        # Try different patterns for grounds
        grounds = re.findall(r'\d+\.\s*\*\*(.*?)\*\*(?:\s*\(.*?\))?\s*:(.*?)(?=\d+\.\s*\*\*|\n\n|$)', 
                           grounds_text + "\n\n", re.DOTALL)
        
        if not grounds:
            grounds = re.findall(r'\d+\.\s*\*\*(.*?)\*\*(?:\s*\(.*?\))?\s*\n(.*?)(?=\d+\.\s*\*\*|\n\n|$)', 
                               grounds_text + "\n\n", re.DOTALL)
        
        if not grounds:
            grounds = re.findall(r'\d+\.\s*\*\*(.*?)\*\*(?:\s*\(.*?\))?(.*?)(?=\d+\.\s*|\n\n|$)', 
                               grounds_text + "\n\n", re.DOTALL)
        
        if not grounds:
            # Simplest pattern as fallback
            grounds = re.findall(r'\d+\.\s*(.*?)(?=\d+\.\s*|\n\n|$)', 
                               grounds_text + "\n\n", re.DOTALL)
            for ground in grounds:
                ground_text = ground.strip()
                title_match = re.search(r'\*\*(.*?)\*\*', ground_text)
                if title_match:
                    title = title_match.group(1).strip()
                    description = re.sub(r'\*\*(.*?)\*\*', '', ground_text).strip()
                    result["grounds"].append({
                        "title": title,
                        "description": description
                    })
                else:
                    # If no title in bold, use first few words as title
                    words = ground_text.split()
                    if len(words) > 3:
                        title = " ".join(words[:3]) + "..."
                        description = ground_text
                    else:
                        title = ground_text
                        description = ""
                    
                    result["grounds"].append({
                        "title": title,
                        "description": description
                    })
        else:
            for title, description in grounds:
                result["grounds"].append({
                    "title": title.strip(),
                    "description": description.strip()
                })
    
    # Extract evidence
    evidence_section = re.search(r'EVIDENCE.*?\*\*\s*\n\s*\n(.*?)(?=---)', case_text, re.DOTALL)
    if evidence_section:
        # Extract witnesses
        witness_section = re.search(r'\*\*Eyewitness Testimonies\*\*\s*\n(.*?)(?=\d+\.\s*\*\*|\n\n|$)', 
                                  evidence_section.group(1), re.DOTALL)
        if witness_section:
            witnesses = re.findall(r'-\s*\*\*Witness Name\*\*:\s*(.*?)(?:\(.*?\))?\s*\n\s*\*\*Testimony\*\*:\s*(.*?)(?=\n\s*-|\n\n|$)', 
                                 witness_section.group(1) + "\n\n", re.DOTALL)
            for name, testimony in witnesses:
                result["evidence"]["witnesses"].append({
                    "name": name.strip(),
                    "testimony": testimony.strip().strip('"')
                })
        
        # Extract physical/digital evidence
        physical_section = re.search(r'\*\*Physical.*?Evidence\*\*\s*\n(.*?)(?=\n\n|$)', 
                                   evidence_section.group(1), re.DOTALL)
        if physical_section:
            evidences = re.findall(r'-\s*\*\*(.*?)\*\*(?:\s*\(.*?\))?\s*:(.*?)(?=\n\s*-|\n\n|$)', 
                                 physical_section.group(1) + "\n\n", re.DOTALL)
            for title, description in evidences:
                result["evidence"]["physical_digital"].append({
                    "title": title.strip(),
                    "description": description.strip()
                })
    
    # Extract prayers/reliefs
    prayer_section = re.search(r'PRAYER.*?\*\*\s*\n\s*\n.*?\n\s*\n(.*?)(?=---|\n\n\n)', case_text, re.DOTALL)
    if prayer_section:
        prayers = re.findall(r'\d+\.\s*(.*?)(?=\d+\.\s*|\n\n|$)', prayer_section.group(1) + "\n\n", re.DOTALL)
        result["prayers"] = [prayer.strip() for prayer in prayers if prayer.strip()]
    
    # Extract verification, date, place
    verification_section = re.search(r'VERIFICATION.*?\*\*\s*\n\s*\n(.*?)(?=\*\*Signed)', case_text, re.DOTALL)
    if not verification_section:
        verification_section = re.search(r'\*\*VERIFICATION\*\*\s*\n\s*\n(.*?)(?=Date:|$)', case_text, re.DOTALL)
    if not verification_section:
        verification_section = re.search(r'VERIFICATION\s*\n\s*\n(.*?)(?=Date:|$)', case_text, re.DOTALL)
    if verification_section:
        result["verification"] = verification_section.group(1).strip()
    
    date_match = re.search(r'Date:\s*(.*?)(?:\n|$)', case_text)
    if date_match:
        result["date_filed"] = date_match.group(1).strip()
    
    place_match = re.search(r'Place:\s*(.*?)(?:\n|$)', case_text)
    if place_match:
        result["place_filed"] = place_match.group(1).strip()
    
    advocate_match = re.search(r'Advocate:\s*(.*?)(?:\n|$)', case_text)
    if advocate_match:
        result["advocate"] = advocate_match.group(1).strip()
    
    return result

def format_case_details(case_text: str) -> Dict[str, Any]:
    """
    Format and structure the case details from raw text.
    
    Args:
        case_text: The raw case text
        
    Returns:
        A dictionary with structured case information
    """
    extracted_details = extract_case_details(case_text)
    
    # You can add additional formatting or processing here if needed
    
    return extracted_details